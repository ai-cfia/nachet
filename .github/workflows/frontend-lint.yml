name: Frontend Lint

on:
  pull_request:
    paths:
      - 'frontend/**'
      - '.github/workflows/frontend-ci.yml'
      - 'package.json'
      - '.nvmrc'
      - 'tsconfig.json'
    types:
      - opened
      - closed
      - synchronize

concurrency:
  group: frontend-ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IS_MONOREPO: true
  FRONTEND_PATH: frontend
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/nachet-frontend

defaults:
  run:
    working-directory: frontend

jobs:
  version-check:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get PR branch version
        id: pr-version
        run: |
          PR_VERSION=$(jq -r '.version' frontend/package.json)
          echo "PR version: $PR_VERSION"
          echo "version=$PR_VERSION" >> $GITHUB_OUTPUT
      
      - name: Get target branch version
        id: target-version
        run: |
          git fetch origin ${{ github.base_ref }}
          TARGET_VERSION=$(git show origin/${{ github.base_ref }}:frontend/package.json | jq -r '.version')
          echo "Target branch version: $TARGET_VERSION"
          echo "version=$TARGET_VERSION" >> $GITHUB_OUTPUT
      
      - name: Compare versions
        run: |
          PR_VERSION="${{ steps.pr-version.outputs.version }}"
          TARGET_VERSION="${{ steps.target-version.outputs.version }}"
          
          echo "Comparing versions:"
          echo "  Target branch (${{ github.base_ref }}): $TARGET_VERSION"
          echo "  PR branch: $PR_VERSION"
          
          # Function to compare semantic versions
          compare_versions() {
            local version1=$1
            local version2=$2
            
            # Split versions into arrays
            IFS='.' read -ra V1 <<< "$version1"
            IFS='.' read -ra V2 <<< "$version2"
            
            # Compare each component
            for i in {0..2}; do
              v1_part=${V1[i]:-0}
              v2_part=${V2[i]:-0}
              
              if [ "$v1_part" -gt "$v2_part" ]; then
                return 0  # version1 > version2
              elif [ "$v1_part" -lt "$v2_part" ]; then
                return 1  # version1 < version2
              fi
            done
            
            return 1  # versions are equal
          }
          
          if [ "$PR_VERSION" = "$TARGET_VERSION" ]; then
            echo "❌ Version has not been incremented!"
            echo "The version in frontend/package.json ($PR_VERSION) is the same as in the target branch."
            echo "Please increment the version before merging this PR."
            exit 1
          elif compare_versions "$PR_VERSION" "$TARGET_VERSION"; then
            echo "✅ Version has been incremented correctly!"
            echo "  $TARGET_VERSION → $PR_VERSION"
          else
            echo "❌ Version appears to have been decremented!"
            echo "The PR version ($PR_VERSION) is lower than the target branch version ($TARGET_VERSION)."
            echo "Please ensure the version is incremented properly."
            exit 1
          fi

  extract-versions:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.versions.outputs.node-version }}
      npm-version: ${{ steps.versions.outputs.npm-version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Extract versions from package.json
        id: versions
        run: |
          NODE_VERSION=$(jq -r '.engines.node' package.json | sed 's/\^//')
          NPM_VERSION=$(jq -r '.engines.npm' package.json | sed 's/\^//')
          echo "Detected Node.js version: $NODE_VERSION"
          echo "Detected npm version: $NPM_VERSION"
          echo "node-version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "npm-version=$NPM_VERSION" >> $GITHUB_OUTPUT

  frontend-lint-test:
    needs: [extract-versions, version-check]
    uses: ai-cfia/github-workflows/.github/workflows/workflow-lint-test-node-mono.yml@main
    with:
      working-directory: frontend
      node-version: ${{ needs.extract-versions.outputs.node-version }}
      npm-version: ${{ needs.extract-versions.outputs.npm-version }}
    secrets: inherit

  markdown-check:
    needs: version-check
    uses: ai-cfia/github-workflows/.github/workflows/workflow-markdown-check-mono.yml@main
    with:
      working-directory: frontend
      md-link-config-file-path: ".mlc_config.json"
    secrets: inherit
